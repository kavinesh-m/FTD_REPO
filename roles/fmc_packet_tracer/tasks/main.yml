---
# FMC Packet Tracer Tasks

#==============================================================================
# VARIABLE VALIDATION AND SETUP
#==============================================================================

- name: Initialize role execution
  debug:
    msg:
      - "=========================================="
      - "      FMC PACKET TRACER EXECUTION"
      - "=========================================="
      - "Starting packet tracer role execution..."
      - "Timestamp: {{ now().strftime('%Y-%m-%dT%H:%M:%S') }}"
  run_once: true

- name: Define required variables list
  set_fact:
    fmc_packet_tracer_required_vars:
      - fmc_host
      - fmc_username
      - fmc_password
      - source_ip
      - dest_ip
    fmc_packet_tracer_optional_vars:
      - source_port
      - dest_port
      - protocol
      - device_id
      - device_name
      - interface_id
      - interface_name
      - interface_type
      - list_interfaces
    fmc_packet_tracer_output_vars:
      - trace_output_dir
      - log_output_dir
    fmc_packet_tracer_settings_vars:
      - api_timeout
      - api_retries
      - api_delay
      - validate_certs
      - debug_mode
      - generate_html_reports
      - default_protocol
      - default_source_port
      - default_dest_port

- name: Check for undefined required variables
  set_fact:
    fmc_packet_tracer_undefined_required: "{{ fmc_packet_tracer_undefined_required | default([]) + [item] }}"
  loop: "{{ fmc_packet_tracer_required_vars }}"
  when: vars[item] is not defined
  delegate_to: localhost
  run_once: true

- name: Check for empty required variables
  set_fact:
    fmc_packet_tracer_empty_required: "{{ fmc_packet_tracer_empty_required | default([]) + [item] }}"
  loop: "{{ fmc_packet_tracer_required_vars }}"
  when:
    - vars[item] is defined
    - vars[item] == '' or vars[item] == none
  delegate_to: localhost
  run_once: true

- name: Compile validation errors
  set_fact:
    fmc_packet_tracer_validation_errors: >-
      {{
        (fmc_packet_tracer_undefined_required | default([]) |
         map('regex_replace', '^(.*)$', '\1 is not defined') | list) +
        (fmc_packet_tracer_empty_required | default([]) |
         map('regex_replace', '^(.*)$', '\1 is empty') | list)
      }}
  delegate_to: localhost
  run_once: true

- name: Display validation errors and halt execution
  fail:
    msg:
      - "=========================================="
      - "    FMC PACKET TRACER VALIDATION FAILED"
      - "=========================================="
      - "The following required variables are missing or invalid:"
      - ""
      - "{{ fmc_packet_tracer_validation_errors | join('\n') }}"
      - ""
      - "REQUIRED VARIABLES:"
      - "  - fmc_host: FMC server hostname or IP address"
      - "  - fmc_username: FMC username for API access"
      - "  - fmc_password: FMC password for API access"
      - "  - source_ip: Source IP address for packet trace"
      - "  - dest_ip: Destination IP address for packet trace"
      - ""
      - "OPTIONAL VARIABLES:"
      - "  - source_port: Source port (default: {{ default_source_port }})"
      - "  - dest_port: Destination port (default: {{ default_dest_port }})"
      - "  - protocol: Protocol to use (default: {{ default_protocol }})"
      - "  - device_id: Target device ID (auto-detected if not specified)"
      - "  - device_name: Target device name"
      - "  - interface_id: Interface ID for packet injection"
      - "  - interface_name: Interface name for packet injection"
      - "  - interface_type: Interface type"
      - "  - list_interfaces: List all available interfaces (default: false)"
      - ""
      - "OUTPUT CONFIGURATION:"
      - "  - trace_output_dir: Directory for trace results"
      - "  - log_output_dir: Directory for log files"
      - ""
      - "Please check your inventory file and group_vars configuration."
      - "=========================================="
  when: fmc_packet_tracer_validation_errors | default([]) | length > 0
  delegate_to: localhost
  run_once: true

- name: Validate IP address format for source_ip
  fail:
    msg:
      - "=========================================="
      - "    INVALID SOURCE IP ADDRESS FORMAT"
      - "=========================================="
      - "Source IP '{{ source_ip }}' is not a valid IPv4 address"
      - "Expected format: X.X.X.X (e.g., 192.168.1.100)"
      - "=========================================="
  when: source_ip is not match('^(?:[0-9]{1,3}\.){3}[0-9]{1,3}$')

- name: Validate IP address format for dest_ip
  fail:
    msg:
      - "=========================================="
      - "    INVALID DESTINATION IP ADDRESS FORMAT"
      - "=========================================="
      - "Destination IP '{{ dest_ip }}' is not a valid IPv4 address"
      - "Expected format: X.X.X.X (e.g., 10.1.1.200)"
      - "=========================================="
  when: dest_ip is not match('^(?:[0-9]{1,3}\.){3}[0-9]{1,3}$')

- name: Validate port numbers (if specified)
  fail:
    msg:
      - "=========================================="
      - "    INVALID PORT NUMBER"
      - "=========================================="
      - "Port {{ item.name }} value '{{ item.value }}' is invalid"
      - "Port numbers must be between 1 and 65535"
      - "=========================================="
  when:
    - item.value is defined
    - item.value != ""
    - (item.value | int < 1 or item.value | int > 65535)
  loop:
    - { name: "source_port", value: "{{ source_port | default('') }}" }
    - { name: "dest_port", value: "{{ dest_port | default('') }}" }

- name: Validate protocol (if specified)
  fail:
    msg:
      - "=========================================="
      - "    INVALID PROTOCOL"
      - "=========================================="
      - "Protocol '{{ protocol }}' is not supported"
      - "Supported protocols: TCP, UDP, ICMP"
      - "=========================================="
  when:
    - protocol is defined
    - protocol != ""
    - protocol | upper not in ['TCP', 'UDP', 'ICMP']

- name: Set default output directories
  set_fact:
    trace_output_dir: "{{ trace_output_dir | default('./reports/packet_tracer') }}"
    log_output_dir: "{{ log_output_dir | default('./logs') }}"

- name: Create output directories
  file:
    path: "{{ item }}"
    state: directory
    mode: '0755'
  loop:
    - "{{ trace_output_dir }}"
    - "{{ log_output_dir }}"
  delegate_to: localhost

- name: Display role configuration summary
  debug:
    msg:
      - "=========================================="
      - "    PACKET TRACER CONFIGURATION"
      - "=========================================="
      - "FMC Host: {{ fmc_host }}"
      - "Source IP: {{ source_ip }}"
      - "Destination IP: {{ dest_ip }}"
      - "Source Port: {{ source_port | default(default_source_port) }}"
      - "Destination Port: {{ dest_port | default(default_dest_port) }}"
      - "Protocol: {{ protocol | default(default_protocol) }}"
      - "Device ID: {{ device_id | default('Auto-detect') }}"
      - "Interface: {{ interface_name | default(interface_id | default('Auto-select')) }}"
      - "Output Directory: {{ trace_output_dir }}"
      - "Log Directory: {{ log_output_dir }}"
      - "Debug Mode: {{ debug_mode | default(false) }}"
      - "=========================================="
  run_once: true

#==============================================================================
# FMC CONNECTION AND DOMAIN SETUP
#==============================================================================

# - name: Test FMC Authentication
#   uri:
#     url: "{{ fmc_protocol }}://{{ ansible_host }}/api/fmc_platform/v1/auth/generatetoken"
#     method: POST
#     user: "{{ fmc_username }}"
#     password: "{{ fmc_password }}"
#     validate_certs: "{{ validate_certs }}"
#     force_basic_auth: yes
#     timeout: "{{ api_timeout | default(30) }}"
#   register: auth_test
#   failed_when: false

# - name: Debug auth_test response
#   debug:
#     msg: "Authentication response: {{ auth_test }}"
#   when: 
#     - auth_test.status == 204
#     - debug_mode | default(false) | bool

# - name: Set FMC Token
#   set_fact:
#     fmc_token: "{{ auth_test.x_auth_access_token }}"
#   when:
#     - auth_test.status == 204

# - name: Get Domain Information
#   cisco.fmcansible.fmc_configuration:
#     operation: getAllDomain
#   register: domain_response
#   failed_when: false

- name: Get Domain Information
  uri:
    url: "https://{{ fmc_host }}/api/fmc_platform/v1/info/domain"
    method: GET
    headers:
      X-auth-access-token: "{{ fmc_auth_token }}"
      Content-Type: "application/json"
    validate_certs: "{{ validate_certs | default(false) }}"
    timeout: "{{ api_timeout | default(30) }}"
    status_code: [200, 401, 403, 500]
  register: domain_response
  retries: "{{ api_retries | default(3) }}"
  delay: "{{ api_delay | default(5) }}"
  failed_when: false

- name: Debug domain response
  debug:
    msg: "Domain response: {{ domain_response }}"
  when: debug_mode | default(false) | bool

- name: Set domain UUID from response
  set_fact:
    domain_uuid: "{{ domain_response.response['items'][0].uuid }}"
  when: 
    - domain_response.response is defined
    - domain_response.response['items'] is defined
    - domain_response.response['items'] | length > 0

- name: Validate Domain Access
  fail:
    msg: "Failed to obtain domain information from FMC"
  when: domain_uuid is not defined or domain_uuid == ""

- name: Get Available Devices for Packet Tracer
  cisco.fmcansible.fmc_configuration:
    operation: getAllDevice
    path_params:
      domainUUID: "{{ domain_uuid }}"
  register: devices

- name: Debug devices response
  debug:
    msg: "Devices response: {{ devices }}"
  when: debug_mode | default(false) | bool

- name: Debug available devices
  debug:
    msg: 
     - "Available devices for packet tracing: {{ devices.response['items'] | length }}"
     - "{{ devices.response['items'][0].id if devices.response['items'] | length > 0 else device_id }}"
  when: debug_mode | default(false) | bool

- name: Debug device details
  debug:
    var: devices
  when: debug_mode | default(false) | bool

# - name: Get Available Physical Interfaces for Selected Device
#   cisco.fmcansible.fmc_configuration:
#     # operation: getAllDevicePhysicalInterface
#     operation: getAllPhysicalInterface
#     path_params:
#       containerUUID: "{{ devices.response['items'][0].id if devices.response['items'] | length > 0 else device_id }}"
#       domainUUID: "{{ domain_uuid }}"
#     query_params:
#       limit: 1000
#   register: physical_interfaces
#   failed_when: false
#   when: 
#     - devices.response is defined
#     - devices.response['items'] | length > 0

# - name: Debug available physical interfaces
#   debug:
#     msg: 
#       - "Available physical interfaces: {{ physical_interfaces.response['items'] | length if physical_interfaces.response is defined else 0 }}"
#       - "Interface details: {{ physical_interfaces.response['items'] | map(attribute='name') | list if physical_interfaces.response is defined and physical_interfaces.response['items'] is defined else [] }}"
#   when: 
#     - debug_mode | default(false) | bool
#     - physical_interfaces is defined

# - name: List All Available Interfaces (when list_interfaces is enabled)
#   debug:
#     msg:
#       - "=== AVAILABLE PHYSICAL INTERFACES ==="
#       - "Device: {{ device_name | default('Unknown') }} ({{ device_id }})"
#       - "Total Interfaces: {{ physical_interfaces.response['items'] | length if physical_interfaces.response is defined else 0 }}"
#       - ""
#       - "Interface List:"
#   when: 
#     - list_interfaces | default(false) | bool
#     - physical_interfaces is defined
#     - physical_interfaces.response is defined

# - name: Display Interface Details
#   debug:
#     msg:
#       - "  Interface: {{ item.name }}"
#       - "    ID: {{ item.id }}"
#       - "    Type: {{ item.type | default('Unknown') }}"
#       - "    Enabled: {{ item.enabled | default('Unknown') }}"
#       - "    Hardware: {{ item.hardware | default('Unknown') }}"
#       - "    MAC Address: {{ item.macAddress | default('Unknown') }}"
#       - "    Speed: {{ item.speed | default('Unknown') }}"
#       - "    Duplex: {{ item.duplex | default('Unknown') }}"
#       - "    MTU: {{ item.mtu | default('Unknown') }}"
#       - "    Security Zone: {{ item.securityZone.name | default('None') if item.securityZone is defined else 'None' }}"
#       - "    IP Address: {{ item.ipv4.static.address | default('None') if item.ipv4 is defined and item.ipv4.static is defined else 'DHCP/None' }}"
#       - "    ---"
#   loop: "{{ physical_interfaces.response['items'] | default([]) }}"
#   when: 
#     - list_interfaces | default(false) | bool
#     - physical_interfaces is defined
#     - physical_interfaces.response is defined
#     - physical_interfaces.response['items'] is defined

# - name: Save Interface List to File (when list_interfaces is enabled)
#   copy:
#     content: |
#       Physical Interfaces Report
#       =========================
#       Timestamp: {{ timestamp }}
#       FMC Host: {{ fmc_host }}
#       Device: {{ device_name | default('Unknown') }} ({{ device_id }})
#       Total Interfaces: {{ physical_interfaces.response['items'] | length if physical_interfaces.response is defined else 0 }}
#       
#       Interface Details:
#       {% for interface in physical_interfaces.response['items'] | default([]) %}
#       - Name: {{ interface.name }}
#         ID: {{ interface.id }}
#         Type: {{ interface.type | default('Unknown') }}
#         Enabled: {{ interface.enabled | default('Unknown') }}
#         Hardware: {{ interface.hardware | default('Unknown') }}
#         MAC Address: {{ interface.macAddress | default('Unknown') }}
#         Speed: {{ interface.speed | default('Unknown') }}
#         Duplex: {{ interface.duplex | default('Unknown') }}
#         MTU: {{ interface.mtu | default('Unknown') }}
#         Security Zone: {{ interface.securityZone.name | default('None') if interface.securityZone is defined else 'None' }}
#         IP Address: {{ interface.ipv4.static.address | default('None') if interface.ipv4 is defined and interface.ipv4.static is defined else 'DHCP/None' }}
#       
#       {% endfor %}
#     dest: "{{ trace_output_dir }}/interface_list_{{ timestamp }}.txt"
#     mode: '0644'
#   delegate_to: localhost
#   when: 
#     - list_interfaces | default(false) | bool
#     - physical_interfaces is defined
#     - physical_interfaces.response is defined

- name: Get all host objects from FMC
  cisco.fmcansible.fmc_configuration:
    operation: getAllHostObject
    path_params:
      domainUUID: "{{ domain_uuid }}"
    query_params:
      limit: 1000
  register: fmc_hosts

- name: Show all host IPs known to FMC
  debug:
    msg: "{{ fmc_hosts.response['items'] | map(attribute='name') | list }}"
  when: debug_mode | default(false) | bool

- name: Set default device if not specified
  set_fact:
    device_id: "{{ devices.response['items'][0].id }}"
    device_name: "{{ devices.response['items'][0].name }}"
  when: 
    - device_id is not defined
    - devices.response['items'] | length > 0

- name: Validate device availability
  fail:
    msg: "No devices available for packet tracing or specified device_id not found"
  when: device_id is not defined

# - name: Set interface parameters if specified
#   set_fact:
#     selected_interface: >-
#       {% if interface_id is defined %}
#         {{ physical_interfaces.response['items'] | selectattr('id', 'equalto', interface_id) | first | default({}) }}
#       {% elif interface_name is defined %}
#         {{ physical_interfaces.response['items'] | selectattr('name', 'equalto', interface_name) | first | default({}) }}
#       {% else %}
#         {}
#       {% endif %}
#   when: 
#     - physical_interfaces is defined
#     - physical_interfaces.response is defined
#     - physical_interfaces.response['items'] is defined

# - name: Validate interface selection (if interface specified)
#   fail:
#     msg: >-
#       Interface validation failed:
#       {% if interface_id is defined %}
#       Interface ID '{{ interface_id }}' not found on device {{ device_name | default('Unknown') }}.
#       {% elif interface_name is defined %}
#       Interface name '{{ interface_name }}' not found on device {{ device_name | default('Unknown') }}.
#       {% endif %}
#       Available interfaces: {{ physical_interfaces.response['items'] | map(attribute='name') | list | join(', ') if physical_interfaces.response is defined and physical_interfaces.response['items'] is defined else 'None' }}
#   when:
#     - (interface_id is defined or interface_name is defined)
#     - physical_interfaces is defined
#     - physical_interfaces.response is defined
#     - physical_interfaces.response['items'] is defined
#     - (selected_interface is not defined or selected_interface.id is not defined)

# - name: Display selected interface information (if interface specified)
#   debug:
#     msg:
#       - "=== SELECTED INTERFACE ==="
#       - "Interface: {{ selected_interface.name }}"
#       - "ID: {{ selected_interface.id }}"
#       - "Type: {{ selected_interface.type | default('Unknown') }}"
#       - "Enabled: {{ selected_interface.enabled | default('Unknown') }}"
#       - "Hardware: {{ selected_interface.hardware | default('Unknown') }}"
#       - "MAC Address: {{ selected_interface.macAddress | default('Unknown') }}"
#       - "Security Zone: {{ selected_interface.securityZone.name | default('None') if selected_interface.securityZone is defined else 'None' }}"
#       - "IP Address: {{ selected_interface.ipv4.static.address | default('None') if selected_interface.ipv4 is defined and selected_interface.ipv4.static is defined else 'DHCP/None' }}"
#   when:
#     - selected_interface is defined
#     - selected_interface.id is defined
#     - debug_mode | default(false) | bool

# - name: Prepare packet tracer parameters
#   set_fact:
#     tracer_params: >-
#       {
#         "device": {
#           "id": "{{ device_id }}",
#           "type": "Device",
#           "name": "{{ device_name | default('Unknown') }}"
#         },
#         "protocol": "{{ protocol | default(default_protocol) | upper }}",
#         "sourceIPType": "IPv4",
#         "sourceIPValue": "{{ source_ip }}",
#         "destinationIPType": "IPv4",
#         "destinationIPValue": "{{ dest_ip }}",
#         "sourcePort": {{ source_port | default(default_source_port) | int }},
#         "destinationPort": {{ dest_port | default(default_dest_port) | int }}
#         {% if selected_interface is defined and selected_interface.id is defined %},
#         "interface": {
#           "id": "{{ selected_interface.id }}",
#           "type": "PhysicalInterface",
#           "name": "{{ selected_interface.name | default('Unknown') }}"
#         }
#         {% endif %}
#       }


- name: Execute 'getAllInterfaceObject' operation
  cisco.fmcansible.fmc_configuration:
    operation: "getAllInterfaceObject"
    path_params:
        domainUUID: "{{ domain_uuid }}"
    query_params:
        limit: 1000
  register: interface_objects

- name: Debug interface objects response first 5 items
  debug:
    msg: "Interface objects response: {{ interface_objects.response['items'][:5] }}"
  when: debug_mode | default(false) | bool

- name: Filter out SecurityZone interface objects
  set_fact:
    non_securityzone_interfaces: "{{ interface_objects.response['items'] | rejectattr('type', 'equalto', 'SecurityZone') | list }}"

- name: Debug filtered interfaces
  debug:
    var: non_securityzone_interfaces[0]
  when: debug_mode | default(false) | bool and non_securityzone_interfaces is defined

# - name: Set interface variables from first interface object
#   set_fact:
#     interface_id: "{{ interface_objects.response['items'][0].id }}"
#     interface_type: "{{ interface_objects.response['items'][0].type }}"
#     interface_name: "{{ interface_objects.response['items'][0].name }}"
#   when:
#     - interface_objects.response is defined
#     - interface_objects.response['items'] is defined
#     - interface_objects.response['items'] | length > 0
#     - (interface_id is not defined or interface_id == "") and (interface_name is not defined or interface_name == "")

- name: Set interface variables from first interface object
  set_fact:
    interface_id: "{{ non_securityzone_interfaces[0].id }}"
    interface_type: "{{ non_securityzone_interfaces[0].type }}"
    interface_name: "{{ non_securityzone_interfaces[0].name }}"
  when:
    - non_securityzone_interfaces is defined
    - non_securityzone_interfaces | length > 0
    - (interface_id is not defined or interface_id == "") and (interface_name is not defined or interface_name == "")

- name: Prepare packet tracer parameters
  set_fact:
    tracer_params:
      device:
        id: "{{ device_id }}"
        type: "Device"
        name: "{{ device_name | default('Unknown') }}"
      protocol: "{{ protocol | default(default_protocol) | upper }}"
      sourceIPType: "IPv4"
      sourceIPValue: "{{ source_ip }}"
      destinationIPType: "IPv4"
      destinationIPValue: "{{ dest_ip }}"
      sourcePort: "{{ source_port | default(default_source_port) | string }}"
      destinationPort: "{{ dest_port | default(default_dest_port) | string }}"
      interface:
        id: "{{ interface_id }}"
        type: "{{ interface_type }}"
        name: "{{ interface_name }}"

- name: Debug packet tracer parameters
  debug:
    msg:
      - "fmc_host: {{ fmc_host }}"
      - "domain_uuid: {{ domain_uuid }}"
      - "device_id: {{ device_id }}"
      - "device_name: {{ device_name | default('Unknown') }}"
      - "tracer_params: {{ tracer_params }}"
  when: debug_mode | default(false) | bool

# https://github.com/CiscoDevNet/FMCAnsible/blob/9b5dccf7c6ba6dcb75e2c073fb8b5f4bcaec5ca0/samples/docs/operations/create_packet_tracer.md?plain=1
- name: Try Packet Tracer with Primary API Endpoint
  cisco.fmcansible.fmc_configuration:
    operation: createPacketTracer
    path_params:
      domainUUID: "{{ domain_uuid }}"
    data: "{{ tracer_params }}"
  register: tracer_result_primary
  failed_when: false

- name: Debug primary packet tracer result
  debug:
    msg: "Primary packet tracer result: {{ tracer_result_primary }}"
  when: debug_mode | default(false) | bool

# Alternative endpoints removed - cisco.fmcansible handles the correct endpoint automatically

- name: Set successful tracer result
  set_fact:
    tracer_result: "{{ tracer_result_primary }}"
  when: tracer_result_primary.response is defined

- name: Handle packet tracer failure
  set_fact:
    tracer_result:
      response: null
      error:
        message: "Packet tracer functionality not available in this FMC environment"
        details: "{{ tracer_result_primary.msg | default('Unknown error') }}"
  when: tracer_result_primary.response is not defined

- name: Debug packet tracer result
  debug:
    msg: "Packet tracer result: {{ tracer_result }}"
  when: debug_mode | default(false) | bool

- name: Set timestamp variable
  set_fact:
   timestamp: "{{ lookup('pipe', 'date +%Y-%m-%d_%H-%M-%S') }}"

- name: Process Packet Tracer Results
  set_fact:
    trace_summary:
      timestamp: "{{ timestamp }}"
      fmc_host: "{{ fmc_host }}"
      device_name: "{{ device_name | default('Unknown') }}"
      device_id: "{{ device_id }}"
      trace_parameters: "{{ tracer_params }}"
      trace_results: >-
        {% if tracer_result.response is defined and tracer_result.response %}
          {{ tracer_result.response }}
        {% elif tracer_result.error is defined %}
          {{ tracer_result.error }}
        {% else %}
          {}
        {% endif %}
      trace_status: "{{ 'SUCCESS' if tracer_result.response is defined and tracer_result.response else 'FAILED' }}"

- name: Save Packet Tracer Results to JSON
  copy:
    content: "{{ trace_summary | to_nice_json }}"
    dest: "{{ trace_output_dir }}/packet_trace_{{ timestamp }}.json"
    mode: '0644'
  delegate_to: localhost

- name: Save Detailed Trace Log
  copy:
    content: |
      Packet Tracer Execution Log
      ===========================
      Timestamp: {{ timestamp }}
      FMC Host: {{ fmc_host }}
      Device: {{ device_name | default('Unknown') }} ({{ device_id }})
      
      Trace Parameters:
      - Source IP: {{ source_ip }}
      - Destination IP: {{ dest_ip }}
      - Source Port: {{ source_port | default(default_source_port) }}
      - Destination Port: {{ dest_port | default(default_dest_port) }}
      - Protocol: {{ protocol | default(default_protocol) }}
      
      Results:
      {{ tracer_result.response | default(tracer_result.error | default({})) | to_nice_yaml }}
    dest: "{{ trace_output_dir }}/packet_trace_detailed_{{ timestamp }}.log"
    mode: '0644'
  delegate_to: localhost

- name: Log Packet Tracer Activity
  lineinfile:
    path: "{{ log_output_dir }}/packet_tracer.log"
    line: "{{ timestamp }} - Packet Trace on {{ fmc_host }} - {{ source_ip }}:{{ source_port | default(default_source_port) }} -> {{ dest_ip }}:{{ dest_port | default(default_dest_port) }} - Status: {{ 'SUCCESS' if tracer_result.response is defined else 'FAILED' }}"
    create: yes
    mode: '0644'
  delegate_to: localhost

- name: Display Packet Tracer Summary
  debug:
    msg:
      - "Packet tracer execution completed"
      - "FMC Host: {{ fmc_host }}"
      - "Device: {{ device_name | default('Unknown') }} ({{ device_id }})"
      - "Source: {{ source_ip }}:{{ source_port | default(default_source_port) }}"
      - "Destination: {{ dest_ip }}:{{ dest_port | default(default_dest_port) }}"
      - "Protocol: {{ protocol | default(default_protocol) }}"
      - "Status: {{ 'SUCCESS' if tracer_result.response is defined else 'FAILED' }}"
      - "Results saved to: {{ trace_output_dir }}/packet_trace_{{ timestamp }}.json"
      - "{% if tracer_result.response is not defined %}NOTE: Packet tracer may not be available in DevNet sandbox environments{% endif %}"

- name: Display Trace Results (if successful)
  debug:
    var: tracer_result.response
  when: 
    - tracer_result.response is defined
    - debug_mode | default(false) | bool
