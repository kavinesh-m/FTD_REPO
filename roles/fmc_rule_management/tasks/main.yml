---
# FMC Rule Management - Time-based Disable/Delete Tasks

- name: Get Domain Information
  cisco.fmcansible.fmc_configuration:
    operation: getAllDomain
  register: domain_response
  failed_when: false

- name: Debug Domain Response
  debug:
    var: domain_response
  when: 
    - domain_response is defined
    - debug_mode | default(false) | bool

- name: Set domain UUID from response
  set_fact:
    domain_uuid: "{{ domain_response.response['items'][0].uuid }}"
  when: 
    - domain_response.response is defined
    - domain_response.response['items'] is defined
    - domain_response.response['items'] | length > 0

- name: Validate Domain Access
  fail:
    msg: "Failed to obtain domain information from FMC"
  when: domain_uuid is not defined or domain_uuid == ""

- name: Get All Access Policies
  cisco.fmcansible.fmc_configuration:
    operation: getAllAccessPolicy
    path_params:
      domainUUID: "{{ domain_uuid }}"
  register: policies

- name: Debug Access Policies
  debug:
    var: policies
  when: 
    - policies is defined
    - debug_mode | default(false) | bool

- name: Validate required parameters
  fail:
    msg: "Required parameter {{ item }} is not defined"
  when: vars[item] is not defined or vars[item] == ""
  loop:
    - source_ip
    - dest_ip

- name: Initialize rule tracking variables
  set_fact:
    all_rules: []
    expired_rules: []
    disabled_rules: []
    deleted_rules: []
    rule_summary: {}
    current_epoch: "{{ lookup('pipe', 'date +%s') | int }}"

- name: Get Rules for Each Policy
  cisco.fmcansible.fmc_configuration:
    operation: getAllAccessRule
    path_params:
      domainUUID: "{{ domain_uuid }}"
      containerUUID: "{{ item.id }}"
  loop: "{{ policies.response['items'] | default([]) }}"
  register: policy_rules
  when: 
    - policies.response is defined
    - policies.response['items'] | length > 0

- name: Process Rules and Identify Expired Ones
  set_fact:
    all_rules: "{{ all_rules + (item.response['items'] | default([])) }}"
  loop: "{{ policy_rules.results | default([]) }}"
  when: 
    - policy_rules is defined
    - policy_rules.results is defined
    - item.response is defined
    - item.response['items'] is defined
    - item.response['items'] is iterable
    - item.response['items'] | length > 0

- name: Identify Rules with Expiry Metadata
  set_fact:
    expired_rules: "{{ expired_rules + [item] }}"
  loop: "{{ all_rules | default([]) }}"
  when: 
    - all_rules is defined
    - all_rules | length > 0
    - item.metadata is defined
    - item.metadata.expiry_date is defined
    - (item.metadata.expiry_date | int) < current_epoch
    - rule_expiry_check_enabled | bool

- name: Identify Rules with Name-based Expiry (YYYY-MM-DD format)
  set_fact:
    expired_rules: "{{ expired_rules + [item] }}"
  loop: "{{ all_rules }}"
  vars:
    rule_date_match: "{{ item.name | regex_search('(\\d{4}-\\d{2}-\\d{2})') }}"
    rule_epoch: "{{ (rule_date_match + ' 00:00:00') | to_datetime('%Y-%m-%d %H:%M:%S') | int }}"
  when: 
    - rule_date_match is not none
    - (rule_date_match + ' 00:00:00') is match('^\\d{4}-\\d{2}-\\d{2} 00:00:00$')
    - rule_epoch < current_epoch
    - rule_expiry_check_enabled | bool

- name: Backup Rules Before Modification
  copy:
    content: "{{ {'rules': expired_rules, 'timestamp': timestamp} | to_nice_json }}"
    dest: "{{ config_output_dir }}/rules_backup_{{ timestamp }}.json"
    mode: '0644'
  delegate_to: localhost
  when: 
    - expired_rules | length > 0
    - rule_backup_before_delete | bool

- name: Disable Expired Rules
  cisco.fmcansible.fmc_configuration:
    operation: updateAccessRule
    path_params:
      domainUUID: "{{ domain_uuid }}"
      containerUUID: "{{ item.metadata.policy.id }}"
      objectId: "{{ item.id }}"
    data:
      id: "{{ item.id }}"
      name: "{{ item.name }}"
      enabled: false
      action: "{{ item.action }}"
      sourceNetworks: "{{ item.sourceNetworks | default({}) }}"
      destinationNetworks: "{{ item.destinationNetworks | default({}) }}"
      sourcePorts: "{{ item.sourcePorts | default({}) }}"
      destinationPorts: "{{ item.destinationPorts | default({}) }}"
  loop: "{{ expired_rules }}"
  register: disable_results
  when: 
    - expired_rules | length > 0
    - rule_auto_disable | bool
  failed_when: false

- name: Track Successfully Disabled Rules
  set_fact:
    disabled_rules: "{{ disabled_rules + [item.item] }}"
  loop: "{{ disable_results.results | default([]) }}"
  when: 
    - item.response is defined

- name: Delete Expired Rules (if enabled)
  cisco.fmcansible.fmc_configuration:
    operation: deleteAccessRule
    path_params:
      domainUUID: "{{ domain_uuid }}"
      containerUUID: "{{ item.metadata.policy.id }}"
      objectId: "{{ item.id }}"
  loop: "{{ expired_rules }}"
  register: delete_results
  when: 
    - expired_rules | length > 0
    - rule_auto_delete | bool
  failed_when: false

- name: Track Successfully Deleted Rules
  set_fact:
    deleted_rules: "{{ deleted_rules + [item.item] }}"
  loop: "{{ delete_results.results | default([]) }}"
  when: 
    - item.response is defined

- name: Generate Rule Management Summary
  set_fact:
    rule_summary:
      timestamp: "{{ timestamp }}"
      fmc_host: "{{ fmc_host }}"
      total_rules_checked: "{{ all_rules | length }}"
      expired_rules_found: "{{ expired_rules | length }}"
      rules_disabled: "{{ disabled_rules | length }}"
      rules_deleted: "{{ deleted_rules | length }}"
      expired_rules_details: "{{ expired_rules }}"
      disabled_rules_details: "{{ disabled_rules }}"
      deleted_rules_details: "{{ deleted_rules }}"

- name: Save Rule Management Report
  copy:
    content: "{{ rule_summary | to_nice_json }}"
    dest: "{{ report_output_dir }}/rule_management_{{ timestamp }}.json"
    mode: '0644'
  delegate_to: localhost

- name: Log Rule Management Activity
  lineinfile:
    path: "{{ log_output_dir }}/rule_management.log"
    line: "{{ timestamp }} - Rule Management on {{ fmc_host }} - Checked: {{ all_rules | length }}, Expired: {{ expired_rules | length }}, Disabled: {{ disabled_rules | length }}, Deleted: {{ deleted_rules | length }}"
    create: yes
    mode: '0644'
  delegate_to: localhost

- name: Display Rule Management Summary
  debug:
    msg:
      - "Rule management completed successfully"
      - "FMC Host: {{ fmc_host }}"
      - "Total rules checked: {{ all_rules | length }}"
      - "Expired rules found: {{ expired_rules | length }}"
      - "Rules disabled: {{ disabled_rules | length }}"
      - "Rules deleted: {{ deleted_rules | length }}"
      - "Report saved to: {{ report_output_dir }}/rule_management_{{ timestamp }}.json"
