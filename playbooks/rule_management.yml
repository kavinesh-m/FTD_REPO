---
- name: FMC Rule Management - Time-based Disable/Delete
  hosts: fmc_servers
  gather_facts: true
  vars:
    timestamp: "{{ ansible_date_time.date }}_{{ ansible_date_time.time | replace(':', '-') }}"
    current_epoch: "{{ ansible_date_time.epoch | int }}"
    
  tasks:
    - name: Create output directories
      file:
        path: "{{ item }}"
        state: directory
        mode: '0755'
      loop:
        - "{{ config_output_dir }}"
        - "{{ log_output_dir }}"
        - "{{ report_output_dir }}"
      delegate_to: localhost
      run_once: true

    - name: Get FMC Authentication Token
      uri:
        url: "{{ fmc_protocol }}://{{ fmc_host }}/api/fmc_platform/v1/auth/generatetoken"
        method: POST
        user: "{{ fmc_username }}"
        password: "{{ fmc_password }}"
        validate_certs: "{{ validate_certs }}"
        force_basic_auth: yes
        timeout: "{{ api_timeout }}"
        status_code: 204
      register: auth_response
      retries: "{{ api_retries }}"
      delay: "{{ api_delay }}"
      until: auth_response.status == 204

    - name: Set authentication token
      set_fact:
        auth_token: "{{ auth_response.x_auth_access_token }}"
        domain_uuid: "{{ auth_response.domain_uuid | default(domain_uuid) }}"

    - name: Get All Access Policies
      uri:
        url: "{{ fmc_protocol }}://{{ fmc_host }}/api/fmc_config/v1/domain/{{ domain_uuid }}/policy/accesspolicies"
        method: GET
        headers:
          X-auth-access-token: "{{ auth_token }}"
        validate_certs: "{{ validate_certs }}"
        timeout: "{{ api_timeout }}"
      register: policies

    - name: Initialize rule tracking variables
      set_fact:
        all_rules: []
        expired_rules: []
        disabled_rules: []
        deleted_rules: []
        rule_summary: {}

    # - name: Debug policy_rules output
    #   debug:
    #     msg: "{{ policies.json['items'] | default([]) }}"

    # - name: Debug FMC API URL
    #   debug:
    #     msg: "{{ fmc_protocol }}://{{ fmc_host }}/api/fmc_config/v1/domain/{{ domain_uuid }}/policy/accesspolicies/{{ item.id }}/accessrules"
    #   loop: "{{ policy_rules }}"

    # - name: auth_token Debug
    #   debug:
    #     msg: "Authentication Token: {{ auth_token }}"

    - name: Get Rules for Each Policy
      uri:
        url: "{{ fmc_protocol }}://{{ fmc_host }}/api/fmc_config/v1/domain/{{ domain_uuid }}/policy/accesspolicies/{{ item.id }}/accessrules"
        method: GET
        headers:
          X-auth-access-token: "{{ auth_token }}"
        validate_certs: "{{ validate_certs }}"
        timeout: "{{ api_timeout }}"
      loop: "{{ policies.json['items'] | default([]) }}"
      register: policy_rules
      when: 
        - policies.json is defined
        - policies.json['items'] | length > 0

    # - name: Debug item.json
    #   debug:
    #     var: item.json
    #   loop: "{{ policy_rules.results | default([]) }}"
    #   when: item.json is defined

    - name: Process Rules and Identify Expired Ones
      set_fact:
        all_rules: "{{ all_rules + (item.json['items'] | default([])) }}"
      loop: "{{ policy_rules.results | default([]) }}"
      when: 
        - policy_rules is defined
        - policy_rules.results is defined
        - item.json is defined
        - item.json['items'] is defined
        - item.json['items'] is iterable
        - item.json['items'] | length > 0

    - name: Identify Rules with Expiry Metadata
      set_fact:
        expired_rules: "{{ expired_rules + [item] }}"
      loop: "{{ all_rules | default([]) }}"
      when: 
        - all_rules is defined
        - all_rules | length > 0
        - item.metadata is defined
        - item.metadata.expiry_date is defined
        - (item.metadata.expiry_date | int) < current_epoch
        - rule_expiry_check_enabled | bool

    - name: Identify Rules with Name-based Expiry (YYYY-MM-DD format)
      set_fact:
        expired_rules: "{{ expired_rules + [item] }}"
      loop: "{{ all_rules }}"
      vars:
        rule_date_match: "{{ item.name | regex_search('(\\d{4}-\\d{2}-\\d{2})') }}"
        rule_epoch: "{{ (rule_date_match + ' 00:00:00') | to_datetime('%Y-%m-%d %H:%M:%S') | int }}"
      when: 
        - rule_date_match is not none
        - (rule_date_match + ' 00:00:00') is match('^\\d{4}-\\d{2}-\\d{2} 00:00:00$')
        - rule_epoch < current_epoch
        - rule_expiry_check_enabled | bool

    - name: Backup Rules Before Modification
      copy:
        content: "{{ {'rules': expired_rules, 'timestamp': timestamp} | to_nice_json }}"
        dest: "{{ config_output_dir }}/rules_backup_{{ timestamp }}.json"
        mode: '0644'
      delegate_to: localhost
      when: 
        - expired_rules | length > 0
        - rule_backup_before_delete | bool

    - name: Disable Expired Rules
      uri:
        url: "{{ fmc_protocol }}://{{ fmc_host }}/api/fmc_config/v1/domain/{{ domain_uuid }}/policy/accesspolicies/{{ item.metadata.policy.id }}/accessrules/{{ item.id }}"
        method: PUT
        headers:
          X-auth-access-token: "{{ auth_token }}"
        body_format: json
        body:
          id: "{{ item.id }}"
          name: "{{ item.name }}"
          enabled: false
          action: "{{ item.action }}"
          sourceNetworks: "{{ item.sourceNetworks | default({}) }}"
          destinationNetworks: "{{ item.destinationNetworks | default({}) }}"
          sourcePorts: "{{ item.sourcePorts | default({}) }}"
          destinationPorts: "{{ item.destinationPorts | default({}) }}"
        validate_certs: "{{ validate_certs }}"
        timeout: "{{ api_timeout }}"
      loop: "{{ expired_rules }}"
      register: disable_results
      when: 
        - expired_rules | length > 0
        - rule_auto_disable | bool
      failed_when: false

    - name: Track Successfully Disabled Rules
      set_fact:
        disabled_rules: "{{ disabled_rules + [item.item] }}"
      loop: "{{ disable_results.results | default([]) }}"
      when: 
        - item.status is defined
        - item.status == 200

    - name: Delete Expired Rules (if enabled)
      uri:
        url: "{{ fmc_protocol }}://{{ fmc_host }}/api/fmc_config/v1/domain/{{ domain_uuid }}/policy/accesspolicies/{{ item.metadata.policy.id }}/accessrules/{{ item.id }}"
        method: DELETE
        headers:
          X-auth-access-token: "{{ auth_token }}"
        validate_certs: "{{ validate_certs }}"
        timeout: "{{ api_timeout }}"
      loop: "{{ expired_rules }}"
      register: delete_results
      when: 
        - expired_rules | length > 0
        - rule_auto_delete | bool
      failed_when: false

    - name: Track Successfully Deleted Rules
      set_fact:
        deleted_rules: "{{ deleted_rules + [item.item] }}"
      loop: "{{ delete_results.results | default([]) }}"
      when: 
        - item.status is defined
        - item.status == 200

    - name: Generate Rule Management Summary
      set_fact:
        rule_summary:
          timestamp: "{{ timestamp }}"
          fmc_host: "{{ fmc_host }}"
          total_rules_checked: "{{ all_rules | length }}"
          expired_rules_found: "{{ expired_rules | length }}"
          rules_disabled: "{{ disabled_rules | length }}"
          rules_deleted: "{{ deleted_rules | length }}"
          expired_rules_details: "{{ expired_rules }}"
          disabled_rules_details: "{{ disabled_rules }}"
          deleted_rules_details: "{{ deleted_rules }}"

    - name: Save Rule Management Report
      copy:
        content: "{{ rule_summary | to_nice_json }}"
        dest: "{{ report_output_dir }}/rule_management_{{ timestamp }}.json"
        mode: '0644'
      delegate_to: localhost

    # - name: Generate HTML Report
    #   template:
    #     src: rule_management_report.j2
    #     dest: "{{ report_output_dir }}/rule_management_{{ timestamp }}.html"
    #     mode: '0644'
    #   delegate_to: localhost

    - name: Log Rule Management Activity
      lineinfile:
        path: "{{ log_output_dir }}/rule_management.log"
        line: "{{ timestamp }} - Rule Management on {{ fmc_host }} - Checked: {{ all_rules | length }}, Expired: {{ expired_rules | length }}, Disabled: {{ disabled_rules | length }}, Deleted: {{ deleted_rules | length }}"
        create: yes
        mode: '0644'
      delegate_to: localhost

    - name: Display Rule Management Summary
      debug:
        msg:
          - "Rule management completed successfully"
          - "FMC Host: {{ fmc_host }}"
          - "Total rules checked: {{ all_rules | length }}"
          - "Expired rules found: {{ expired_rules | length }}"
          - "Rules disabled: {{ disabled_rules | length }}"
          - "Rules deleted: {{ deleted_rules | length }}"
          - "Report saved to: {{ report_output_dir }}/rule_management_{{ timestamp }}.json"
